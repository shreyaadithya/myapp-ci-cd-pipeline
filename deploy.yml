---
- name: Deploy Application to Tomcat
  hosts: webservers
  become: yes
  vars:
    tomcat_home: /opt/tomcat
    app_name: myapp

  tasks:
    - name: Check if Tomcat is installed
      stat:
        path: "{{ tomcat_home }}"
      register: tomcat_exists

    - name: Fail if Tomcat is not installed
      fail:
        msg: "Tomcat is not installed at {{ tomcat_home }}. Please install Tomcat first."
      when: not tomcat_exists.stat.exists

    - name: Stop Tomcat service
      systemd:
        name: tomcat
        state: stopped
      ignore_errors: yes

    - name: Clean existing deployment
      file:
        path: "{{ tomcat_home }}/webapps/{{ app_name }}.war"
        state: absent
      ignore_errors: yes

    - name: Clean existing exploded deployment
      file:
        path: "{{ tomcat_home }}/webapps/{{ app_name }}"
        state: absent
      ignore_errors: yes

    - name: Copy WAR file from Jenkins workspace
      copy:
        src: "{{ war_file_path }}"
        dest: "{{ tomcat_home }}/webapps/{{ app_name }}.war"
        owner: ubuntu
        group: ubuntu
        mode: '0644'
      when: war_file_path is defined

    - name: Alternative - Download WAR from Artifactory (if copy fails)
      get_url:
        url: "https://trial6dfohe.jfrog.io/artifactory/libs-snapshot-local/myapp-1.0-SNAPSHOT.war"
        dest: "{{ tomcat_home }}/webapps/{{ app_name }}.war"
        owner: ubuntu
        group: ubuntu
        mode: '0644'
      when: war_file_path is not defined
      ignore_errors: yes

    - name: Set proper permissions on webapps directory
      file:
        path: "{{ tomcat_home }}/webapps"
        owner: ubuntu
        group: ubuntu
        recurse: yes

    - name: Start Tomcat service
      systemd:
        name: tomcat
        state: started

    - name: Wait for Tomcat to start
      wait_for:
        port: 8081
        delay: 10
        state: started
        timeout: 120

    - name: Wait for application to deploy
      wait_for:
        port: 8081
        delay: 15
        state: started
        timeout: 180

    - name: Check application status
      uri:
        url: "http://localhost:8081/{{ app_name }}"
        method: GET
        status_code: 200, 404, 503
        timeout: 30
      register: app_status
      until: app_status.status != 503
      retries: 10
      delay: 10
      ignore_errors: yes

    - name: Show deployment results
      debug:
        msg: |
          Deployment Summary:
          - Tomcat URL: http://{{ ansible_host }}:8081
          - Application URL: http://{{ ansible_host }}:8081/{{ app_name }}
          - Application Status: {{ app_status.status }}
          - Tomcat Home: {{ tomcat_home }}

          {% if app_status.status == 200 %}
          ‚úÖ Application deployed successfully and is responding
          {% elif app_status.status == 404 %}
          ‚ö†Ô∏è  Application deployed but context path might be different
          {% else %}
          üîß Application might still be starting up
          {% endif %}

          To check Tomcat logs: journalctl -u tomcat -f
          To check application: curl http://localhost:8081/{{ app_name }}
