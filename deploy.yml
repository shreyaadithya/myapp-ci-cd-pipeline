---
- name: Deploy Spring Boot Application
  hosts: webservers
  become: yes

  tasks:
    - name: Install Java
      apt:
        name: openjdk-17-jdk
        state: present
        update_cache: yes

    - name: Create application directory
      file:
        path: /opt/{{ app_name }}
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copy WAR file to server
      copy:
        src: "webapp/myapp-1.0-SNAPSHOT.war"
        dest: /opt/{{ app_name }}/{{ app_name }}.war
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Create systemd service for Spring Boot app
      copy:
        dest: /etc/systemd/system/{{ app_name }}.service
        content: |
          [Unit]
          Description=MyApp Spring Boot Application
          After=network.target

          [Service]
          Type=simple
          User=ubuntu
          Group=ubuntu
          WorkingDirectory=/opt/{{ app_name }}
          ExecStart=/usr/bin/java -jar {{ app_name }}.war
          ExecStop=/bin/kill -15 $MAINPID
          Restart=on-failure
          RestartSec=10
          Environment=SPRING_PROFILES_ACTIVE=prod
          Environment=SERVER_PORT=8080

          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: '0644'

    - name: Stop existing application if running
      systemd:
        name: "{{ app_name }}"
        state: stopped
      ignore_errors: yes

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable and start Spring Boot application
      systemd:
        name: "{{ app_name }}"
        state: started
        enabled: yes

    - name: Wait for application to start
      wait_for:
        port: 8080
        delay: 10
        state: started
        timeout: 120

    - name: Check application health
      uri:
        url: "http://localhost:8080/"
        method: GET
        status_code: 200
        timeout: 30
      register: app_status
      until: app_status.status == 200
      retries: 10
      delay: 10
      ignore_errors: yes

    - name: Configure Apache as reverse proxy
      copy:
        dest: /etc/apache2/sites-available/{{ app_name }}-proxy.conf
        content: |
          <VirtualHost *:80>
              ServerName {{ ansible_host }}
              
              ProxyPreserveHost On
              ProxyPass / http://localhost:8080/
              ProxyPassReverse / http://localhost:8080/
              
              ErrorLog ${APACHE_LOG_DIR}/{{ app_name }}_error.log
              CustomLog ${APACHE_LOG_DIR}/{{ app_name }}_access.log combined
          </VirtualHost>
        owner: root
        group: root
        mode: '0644'

    - name: Enable proxy modules
      command: "a2enmod {{ item }}"
      with_items:
        - proxy
        - proxy_http
      notify: restart apache

    - name: Enable application proxy site
      command: a2ensite {{ app_name }}-proxy.conf
      notify: restart apache

    - name: Disable default site
      command: a2dissite 000-default.conf
      notify: restart apache

    - name: Restart Apache to apply proxy configuration
      systemd:
        name: apache2
        state: restarted

    - name: Wait for Apache to be ready
      wait_for:
        port: 80
        delay: 5
        state: started
        timeout: 30

    - name: Final health check through proxy
      uri:
        url: "http://localhost/"
        method: GET
        status_code: 200
        timeout: 30
      register: final_status
      until: final_status.status == 200
      retries: 5
      delay: 10
      ignore_errors: yes

    - name: Show deployment results
      debug:
        msg: |
          üéâ SPRING BOOT APPLICATION DEPLOYED SUCCESSFULLY!
          
          Application URLs:
          üåê Direct: http://{{ ansible_host }}:8080/
          üåê Through Apache: http://{{ ansible_host }}/
          
          Application Details:
          üì¶ WAR file: /opt/{{ app_name }}/{{ app_name }}.war
          üîß Service: {{ app_name }}.service
          üöÄ Port: 8080
          
          Management Commands:
          üîç Check app: systemctl status {{ app_name }}
          üìä App logs: journalctl -u {{ app_name }} -f
          üåê Apache logs: tail -f /var/log/apache2/{{ app_name }}_access.log
          
          Deployment verified: {{ final_status.status == 200 }}

  handlers:
    - name: restart apache
      systemd:
        name: apache2
        state: restarted
